#+TITLE: Grokking Polysemy

Algebraic Effects
Computational Effect

Library:
- polysemy
- freer-simple
- fused-effects

* Motivation
** Monad doesn't compose
#+begin_src haskell
import Control.Applicative (liftA2)

newtype Compose f g a = Compose (f (g a))

instance (Functor f, Functor g) => Functor (Compose f g) where
  fmap f (Compose h) = Compose $ (fmap . fmap) f h

instance (Applicative f, Applicative g) => Applicative (Compose f g) where
  pure = Compose . pure . pure
  Compose f <*> Compose x = Compose (liftA2 (<*>) f x)

instance (Monad f, Monad g) => Monad (Compose f g) where
  Compose x >>= mf = undefined
      where a = (fmap . fmap) mf x
#+end_src


~mf :: a -> Compose f (g b)~ and ~x :: f (g a)~
~(fmap . fmap) mf x~ can give us ~f (g (Compose f (g b))~, Monad has a ~join~
method to flatten nested monad, only if we build a function ~f g(a) -> g (f a)~

** Monad Transformers (Liang, Hudak & Jones 1995)
** Effect Handler (Plotkin & Power 2003)
Two sides

- Syntax - Free Monad
#+begin_src haskell
data Free f a
  = Var a
  | Op (f (Free f a))

data Or k = Or k k

Op (Or (Var 3) (Var 4))
#+end_src
- Semantics

#+begin_src haskell
type Alg f a = f a -> a
eval :: Functor f => (f b -> b) -> (a -> b) -> Free f a -> b
eval alg gen (Var x) = gen x
eval alg gen (Op x) = alg (fmap (eval alg gen) x)

a :: Free Stop Int
a = Pure 4

b :: Free Stop Int
b = Impure Stop

main :: IO ()
main = do
  print $ stop a
  print $ stop b
#+end_src

Example: Stop

#+begin_src haskell
data Stop k = Stop

stop :: Free Stop a -> Maybe a
stop = eval alg gen where
  alg :: Stop (Maybe a) -> Maybe a
  alg Stop = Nothing

  gen :: a -> Maybe a
  gen x = Just x

stop (Var 3)
stop (Op Stop)
#+end_src

* [[http://www.cs.ru.nl/~W.Swierstra/Publications/DataTypesALaCarte.pdf][Data types a` la carte]]
When I looked into Effect work, lots of them references this Data types a la
carte paper.

https://hackage.haskell.org/package/data-fix-0.2.1/docs/Data-Fix.html
https://en.wikibooks.org/wiki/Haskell/Fix_and_recursion#Recursion

** TODO explain the experssion problem

** Fixing the expression problem

Parameterize the experession data type

#+begin_src haskell
data Expr f = In (f (Expr f))
#+end_src

You may want to think ~f~ as the signature of the constructors. Kind of ~f~ is
~*->*~

The Key idea is to combine expreissions by taking the coproduct of their
signatures.

Coproduct is a fancy way for Sum type

#+begin_src haskell
import GHC.Types (Type)
data (:+:) (f :: k -> Type) (g :: k -> Type) (e :: k)  = Inl (f e) | Inr (g e)
#+end_src

~data (f :+:g) e = Inl (f e) | Inr (g e)~

#+begin_src haskell
data CoProduct f g e = Inl (f e) | Inr (g e)
#+end_src
kind of ~f~ and ~g~ is ~*->*~

#+begin_src haskell
addExample :: Expr (Val :+: Add)
addExample = In (Inr (Add
                       (In
                          (Inl (Val 118))
                       )
                       (In (Inl (Val 1219))))
                )
#+end_src

*** TODO proof ~CoProduct Val Add~ is the orignal ~Expr~.


*** TODO find the definition of `injection`

https://mathworld.wolfram.com/Injection.html

combine monad using coproduct



#+begin_src haskell
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeOperators #-}

module Main where

import GHC.Generics

newtype Expr f = In (f (Expr f))

--data (f :+: g) e = Inl (f e) | Inr (g e)

--infix 8 :+:

-- e is phantom type for type safey
newtype Val e = Val Int

data Add e = Add e e

type AddExpr = Expr Add

data Mul x = Mul x x

instance Functor Val where
  fmap _ (Val e) = Val e

instance Functor Add where
  fmap f (Add left right) = Add (f left) (f right)

instance Functor Mul where
  fmap f (Mul left right) = Mul (f left) (f right)

--instance (Functor f, Functor g) => Functor (f :+:  g) where
--  fmap h (Inl l) = Inl (fmap h l)
--  fmap h (Inr r) = Inr (fmap h r)

foldExpr :: Functor f => (f a -> a) -> Expr f -> a
foldExpr f (In t) = f (fmap (foldExpr f) t)

class Functor f => Eval f where
  evalAlgebra :: f Int -> Int

instance Eval Val where
  evalAlgebra (Val x) = x

instance Eval Add where
  evalAlgebra (Add l r) = l + r

instance (Eval f, Eval g) => Eval (f :+: g) where
  evalAlgebra (L1 l) = evalAlgebra l
  evalAlgebra (R1 r) = evalAlgebra r

instance Eval Mul where
  evalAlgebra (Mul l r) = l * r

eval :: Eval f => Expr f -> Int
eval = foldExpr evalAlgebra

class (Functor sub, Functor sup) => sub :<: sup where
  inj :: sub a -> sup a
  prj :: sup a -> Maybe (sub a)

instance Functor f =>  f :<: f where
  inj = id
  prj = Just

instance (Functor f, Functor g) => f :<: ( f :+: g) where
  inj = L1
  prj (L1 l) = Just l
  prj (R1 _) = Nothing

--instance (Functor f, Functor g) =>  g :<: ( f :+: g) where
--  inj = Inr


instance {-# OVERLAPPABLE #-}
         (Functor f, Functor g, Functor h, f :<: g) => f :<: ( h :+: g) where
  inj = R1 . inj
  prj (L1 _) = Nothing
  prj (R1 r) = prj r

inject :: (g :<: f) => g (Expr f) -> Expr f
inject = In . inj

val :: (Val :<: f) => Int -> Expr f
val x = inject (Val x)

infixl 6 ⊕

(⊕) :: (Add :<: f) => Expr f -> Expr f -> Expr f
x ⊕ y = inject (Add x y)

infixl 7 ⊗

(⊗) :: (Mul :<: f) => Expr f -> Expr f -> Expr f
x ⊗ y = inject (Mul x y)

class Render f where
  render :: Render g => f (Expr g) -> String

pretty :: Render f => Expr f -> String
pretty (In t) = render t

instance Render Val where
  render (Val i) = show i

instance Render Add where
  render (Add l r) = "(" ++ pretty l ++ " + " ++ pretty r ++ ")"

instance Render Mul where
  render (Mul l r) = "(" ++ pretty l ++ " * " ++ pretty r ++ ")"

instance (Render f, Render g) => Render (f :+: g) where
  render (L1 x) = render x
  render (R1 y) = render y

match :: (g :<: f) => Expr f -> Maybe (g (Expr f))
match (In t) = prj t

distr :: (Add :<: f, Mul :<: f) => Expr f -> Maybe (Expr f)
distr t = do
  Mul a b <- match t
  Add c d <- match b
  return (a ⊗ c  ⊕ a ⊗ d)


main :: IO ()
main = print $ pretty x
 where x :: Expr (Val :+: Add :+: Mul)
       x = val 80  ⊗ val 5 ⊕ val 4
#+end_src

*** TypeOperators
 https://typeclasses.com/ghc/type-operators

* What is Free Monad

** Teletype example
#+begin_src haskell
import Control.Monad ((>=>))

data Teletype k
  = Done k
  | WriteLine String (Teletype k)
  | ReadLine (String -> Teletype k)

--echo :: Teletype ()
--echo = ReadLine $ \ msg -> WriteLine msg $ Done ()
echo :: Teletype ()
echo = do
  msg <- ReadLine Done
  WriteLine msg $ Done ()

runTeletypeInIO :: Teletype a -> IO a
runTeletypeInIO (Done a) = pure a
runTeletypeInIO (WriteLine msg k) = do
  putStrLn msg
  runTeletypeInIO k
runTeletypeInIO (ReadLine k) = do
  msg <- getLine
  runTeletypeInIO $ k msg

instance Functor Teletype where
  fmap f (Done g) = Done (f g)
  fmap f (WriteLine msg t) = WriteLine msg $ fmap f t
  fmap f (ReadLine g) = ReadLine (fmap f . g)

instance Applicative Teletype where
  pure = Done
  Done f <*> g = fmap f g
  (WriteLine msg f) <*> g = WriteLine msg $ f <*> g
  -- f :: String -> Teletype (a -> b)
  -- g :: Teletype a
  -- String -> Teletype b
  (ReadLine f) <*> g = ReadLine $ \msg -> f msg <*> g

instance Monad Teletype where
  Done k >>= f = f k
  WriteLine msg k >>= f = WriteLine msg $ k >>= f
  ReadLine k >>= f = ReadLine $ k >=> f

main :: IO ()
main = runTeletypeInIO echo
#+end_src

** TODO verify the functor/applicative/moand implement is correct
** TODO benchmark ??
** TODO checkout [[https://hackage.haskell.org/package/free-5.0.2/docs/Control-Monad-Free.html][Control-Monad-Free]]
** `lift` and `foldFree`
* Type level programming in haskell
https://www.youtube.com/watch?v=ZiGIBU0haOk
haskell higher order kind type level programming
https://www.microsoft.com/en-us/research/uploads/prod/2019/03/unsaturated-type-families-icfp-2019.pdf
** Associated type families

* Genrics
https://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.Generics.html#%3A%2B%3A
https://www.stackbuilders.com/tutorials/haskell/generics/
https://hackage.haskell.org/package/ghc-prim-0.5.3/docs/src/GHC.Types.html#Type

* [[https://skillsmatter.com/skillscasts/14349-the-scope-of-algebraic-effects?utm_medium=social&utm_source=twitter&utm_campaign=7be06e&utm_content=haskellx][The Scope of algebraic effects]]
https://www.cs.ox.ac.uk/people/nicolas.wu/papers/Scope.pdf

Syntax + Semantics

** Free Monad
#+begin_src haskell
data Term f a =
     Pure a
   | Impure (f (Term f a))
#+end_src

or

#+begin_src haskell
data Free f a
  = Var a
  | Op (f (Free f a))
#+end_src

f is a functor, so kind of f is ~* -> *~

** Stop example

#+begin_src haskell
data Free f a
  = Var a
  | Op (f (Free f a))


data Or k = Or k k

a :: Free Or Int
a = Op (Or (Var 3) (Var 4))

type Alg f a = f a -> a

-- simailr to foldExpr
eval :: Functor f => (f b -> b) -> (a -> b) -> Free f a -> b
eval _ gen (Var x) = gen x
eval alg gen (Op x) = alg (fmap (eval alg gen) x)

-- identity monad ? or Const
data Stop k = Stop
instance Functor Stop where
  fmap _ Stop = Stop

stop :: Free Stop a -> Maybe a
stop = eval alg gen where
  alg :: Stop (Maybe a) -> Maybe a
  alg Stop = Nothing

  gen :: a -> Maybe a
  gen = Just

b :: Free Stop Int
b = Var 3

c :: Free Stop Int
c = Op Stop

main :: IO ()
main = print $ stop c
#+end_src


[[http://www.informatik.uni-bremen.de/~clueth/papers/icfp02.pdf][Composing Monads Using Coproducts]]


https://people.cs.kuleuven.be/~tom.schrijvers/Research/talks/haskell2019a.pdf
https://people.cs.kuleuven.be/~tom.schrijvers/Research/papers/haskell2019a.pdf


https://people.cs.kuleuven.be/~tom.schrijvers/Research/papers/mpc2015.pdf

#+begin_src haskell
{-# LANGUAGE EmptyCase#-}
{-# LANGUAGE TypeOperators#-}
module Main where

import GHC.Generics

data Free f a
  = Var a
  | Op (f (Free f a))


data Or k = Or k k
instance Functor Or where
  fmap f (Or xs ys) = Or (f xs) (f ys)

a :: Free Or Int
a = Op (Or (Var 3) (Var 4))

type Alg f a = f a -> a

-- simailr to foldExpr
eval :: Functor f => (f b -> b) -> (a -> b) -> Free f a -> b
eval _ gen (Var x) = gen x
eval alg gen (Op x) = alg (fmap (eval alg gen) x)

-- identity monad ? or Const
data Stop k = Stop
instance Functor Stop where
  fmap _ Stop = Stop

fail :: Free Stop a -> Maybe a
fail = eval alg gen where
  alg :: Stop (Maybe a) -> Maybe a
  alg Stop = Nothing

  gen :: a -> Maybe a
  gen = Just

once :: Free Or a -> a
once = eval alg gen where

  alg :: Or a -> a
  alg (Or xs _) = xs

  gen :: a -> a
  gen = id

b :: Free Stop Int
b = Var 3

c :: Free Stop Int
c = Op Stop

data Void k

instance Functor Void where
  fmap _ _ = undefined

run :: Free Void a -> a
run = eval alg id where
  alg :: Void a -> a
  alg x = case x of {}

d :: Free Void Int
d = Var 666

-- data (f :+ sig) a = Eff (f a) | Sig (sig a)
embed :: Functor g => (f (Free g a) -> Free g a) -> ((f :+: g) (Free g a) -> Free g a)
embed alg (L1 x) = alg x
embed _ (R1 x) = Op x

-- exception
fail' :: Functor f => Free (Stop :+: f) a -> Free f (Maybe a)
fail' = eval (embed alg) gen where
  gen x = Var (Just x)
  alg Stop = Var Nothing


instance Functor f => Functor (Free f) where
  fmap f (Var k) = Var (f k)
  fmap f (Op o) = Op $ (fmap . fmap) f o


instance Functor f => Applicative (Free f) where
  pure = Var

  Var f <*> o = fmap f o
  Op x <*> y = Op (fmap (<*> y) x)


instance Functor f => Monad (Free f) where
  Var k >>= f = f k
  Op z >>= f = Op $ fmap (>>= f) z

-- Nondeterminism
list :: Functor f => Free (Or :+: f) a -> Free f [a]
list = eval (embed alg) gen where
  gen x = Var [x]
  alg (Or mx my) = do xs <- mx
                      ys <- my
                      Var (xs ++ ys)


global :: Functor f => Free (Or :+: Stop :+: f) a -> Free f (Maybe [a])
global = fail' . list

local :: Functor f => Free (Stop :+: Or :+: f) a -> Free f [Maybe a]
local = list . fail'

main :: IO ()
main = print $ run d
#+end_src

https://www.youtube.com/watch?v=idU7GdlfP9Q at 23:16

https://github.com/EncodePanda/todo-rest/tree/master/src

* References
- https://github.com/polysemy-research/polysemy
- https://www.youtube.com/watch?v=-dHFOjcK6pA
- https://www.youtube.com/watch?v=vfDazZfxlNs
- https://reasonablypolymorphic.com/polysemy-talk/
- http://okmij.org/ftp/Haskell/extensible/more.pdf
- https://github.com/lexi-lambda/freer-simple#readme
- https://github.com/fused-effects/fused-effects

https://twitter.com/nicolasgwu
 http://bit.ly/2paQmRi

http://www.cs.ox.ac.uk/people/nicolas.wu/papers/Scope.pdf
 ICFP2019 Monad Transformers & Modular Algebraic Effect
* Setup dev database
https://beb.ninja/post/postgres-local/
https://www.postgresql.org/docs/11/app-pg-ctl.html
#+begin_src shell
initdb -D .tmp/database # Change the directory to wherever you want your data store to be
pg_ctl -D .tmp/database -l logfile start
pg_crul -D .tmp/database stop
createdb
#+end_src
